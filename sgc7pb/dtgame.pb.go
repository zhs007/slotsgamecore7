// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: dtgame.proto

package sgc7pb

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Column
type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{0}
}

func (x *Column) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Row
type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{1}
}

func (x *Row) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// LinesData
type LinesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines []*Row `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *LinesData) Reset() {
	*x = LinesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinesData) ProtoMessage() {}

func (x *LinesData) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinesData.ProtoReflect.Descriptor instead.
func (*LinesData) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{2}
}

func (x *LinesData) GetLines() []*Row {
	if x != nil {
		return x.Lines
	}
	return nil
}

// ReelsData
type ReelsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reels []*Column `protobuf:"bytes,1,rep,name=reels,proto3" json:"reels,omitempty"`
}

func (x *ReelsData) Reset() {
	*x = ReelsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReelsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReelsData) ProtoMessage() {}

func (x *ReelsData) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReelsData.ProtoReflect.Descriptor instead.
func (*ReelsData) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{3}
}

func (x *ReelsData) GetReels() []*Column {
	if x != nil {
		return x.Reels
	}
	return nil
}

// GameScene
type GameScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values   []*Column `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`             // 列
	Indexes  []int32   `protobuf:"varint,2,rep,packed,name=indexes,proto3" json:"indexes,omitempty"`   // 轮子索引
	ValidRow []int32   `protobuf:"varint,3,rep,packed,name=validRow,proto3" json:"validRow,omitempty"` // 有效的行
}

func (x *GameScene) Reset() {
	*x = GameScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameScene) ProtoMessage() {}

func (x *GameScene) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameScene.ProtoReflect.Descriptor instead.
func (*GameScene) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{4}
}

func (x *GameScene) GetValues() []*Column {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *GameScene) GetIndexes() []int32 {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *GameScene) GetValidRow() []int32 {
	if x != nil {
		return x.ValidRow
	}
	return nil
}

// BasicPlayerPublicState - basic PlayerPublicState
type BasicPlayerPublicState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurGameMod string `protobuf:"bytes,1,opt,name=curGameMod,proto3" json:"curGameMod,omitempty"`
	NextM      int32  `protobuf:"varint,2,opt,name=nextM,proto3" json:"nextM,omitempty"`
}

func (x *BasicPlayerPublicState) Reset() {
	*x = BasicPlayerPublicState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicPlayerPublicState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicPlayerPublicState) ProtoMessage() {}

func (x *BasicPlayerPublicState) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicPlayerPublicState.ProtoReflect.Descriptor instead.
func (*BasicPlayerPublicState) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{5}
}

func (x *BasicPlayerPublicState) GetCurGameMod() string {
	if x != nil {
		return x.CurGameMod
	}
	return ""
}

func (x *BasicPlayerPublicState) GetNextM() int32 {
	if x != nil {
		return x.NextM
	}
	return 0
}

// BasicPlayerPrivateState - basic PlayerPrivateState
type BasicPlayerPrivateState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BasicPlayerPrivateState) Reset() {
	*x = BasicPlayerPrivateState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicPlayerPrivateState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicPlayerPrivateState) ProtoMessage() {}

func (x *BasicPlayerPrivateState) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicPlayerPrivateState.ProtoReflect.Descriptor instead.
func (*BasicPlayerPrivateState) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{6}
}

// BasicPlayerPublicState2 - basic PlayerPublicState
type BasicPlayerPublicState2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json string `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *BasicPlayerPublicState2) Reset() {
	*x = BasicPlayerPublicState2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicPlayerPublicState2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicPlayerPublicState2) ProtoMessage() {}

func (x *BasicPlayerPublicState2) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicPlayerPublicState2.ProtoReflect.Descriptor instead.
func (*BasicPlayerPublicState2) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{7}
}

func (x *BasicPlayerPublicState2) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

// BasicPlayerPrivateState2 - basic PlayerPrivateState
type BasicPlayerPrivateState2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json string `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *BasicPlayerPrivateState2) Reset() {
	*x = BasicPlayerPrivateState2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicPlayerPrivateState2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicPlayerPrivateState2) ProtoMessage() {}

func (x *BasicPlayerPrivateState2) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicPlayerPrivateState2.ProtoReflect.Descriptor instead.
func (*BasicPlayerPrivateState2) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{8}
}

func (x *BasicPlayerPrivateState2) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

// GameConfig
type GameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines         *LinesData            `protobuf:"bytes,1,opt,name=lines,proto3" json:"lines,omitempty"`
	Reels         map[string]*ReelsData `protobuf:"bytes,2,rep,name=reels,proto3" json:"reels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PayTables     map[int32]*Row        `protobuf:"bytes,3,rep,name=payTables,proto3" json:"payTables,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Width         int32                 `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                 `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Ver           string                `protobuf:"bytes,6,opt,name=ver,proto3" json:"ver,omitempty"`
	CoreVer       string                `protobuf:"bytes,7,opt,name=coreVer,proto3" json:"coreVer,omitempty"`
	DefaultScene  *GameScene            `protobuf:"bytes,8,opt,name=defaultScene,proto3" json:"defaultScene,omitempty"`
	DefaultScene2 []*GameScene          `protobuf:"bytes,9,rep,name=defaultScene2,proto3" json:"defaultScene2,omitempty"`
	BetMuls       []int32               `protobuf:"varint,10,rep,packed,name=betMuls,proto3" json:"betMuls,omitempty"`
}

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{9}
}

func (x *GameConfig) GetLines() *LinesData {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *GameConfig) GetReels() map[string]*ReelsData {
	if x != nil {
		return x.Reels
	}
	return nil
}

func (x *GameConfig) GetPayTables() map[int32]*Row {
	if x != nil {
		return x.PayTables
	}
	return nil
}

func (x *GameConfig) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GameConfig) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GameConfig) GetVer() string {
	if x != nil {
		return x.Ver
	}
	return ""
}

func (x *GameConfig) GetCoreVer() string {
	if x != nil {
		return x.CoreVer
	}
	return ""
}

func (x *GameConfig) GetDefaultScene() *GameScene {
	if x != nil {
		return x.DefaultScene
	}
	return nil
}

func (x *GameConfig) GetDefaultScene2() []*GameScene {
	if x != nil {
		return x.DefaultScene2
	}
	return nil
}

func (x *GameConfig) GetBetMuls() []int32 {
	if x != nil {
		return x.BetMuls
	}
	return nil
}

// RequestConfig
type RequestConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestConfig) Reset() {
	*x = RequestConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestConfig) ProtoMessage() {}

func (x *RequestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestConfig.ProtoReflect.Descriptor instead.
func (*RequestConfig) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{10}
}

// PlayerState
type PlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public  *any1.Any `protobuf:"bytes,1,opt,name=public,proto3" json:"public,omitempty"`
	Private *any1.Any `protobuf:"bytes,2,opt,name=private,proto3" json:"private,omitempty"`
}

func (x *PlayerState) Reset() {
	*x = PlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerState) ProtoMessage() {}

func (x *PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerState.ProtoReflect.Descriptor instead.
func (*PlayerState) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerState) GetPublic() *any1.Any {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *PlayerState) GetPrivate() *any1.Any {
	if x != nil {
		return x.Private
	}
	return nil
}

// RequestInitialize
type RequestInitialize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestInitialize) Reset() {
	*x = RequestInitialize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInitialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInitialize) ProtoMessage() {}

func (x *RequestInitialize) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInitialize.ProtoReflect.Descriptor instead.
func (*RequestInitialize) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{12}
}

type Stake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinBet  int32  `protobuf:"varint,1,opt,name=coinBet,proto3" json:"coinBet,omitempty"`
	CashBet  int32  `protobuf:"varint,2,opt,name=cashBet,proto3" json:"cashBet,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Stake) Reset() {
	*x = Stake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stake) ProtoMessage() {}

func (x *Stake) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stake.ProtoReflect.Descriptor instead.
func (*Stake) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{13}
}

func (x *Stake) GetCoinBet() int32 {
	if x != nil {
		return x.CoinBet
	}
	return 0
}

func (x *Stake) GetCashBet() int32 {
	if x != nil {
		return x.CashBet
	}
	return 0
}

func (x *Stake) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// RequestPlay - play input parameters for the game
type RequestPlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerState       *PlayerState `protobuf:"bytes,1,opt,name=playerState,proto3" json:"playerState,omitempty"`
	Cheat             string       `protobuf:"bytes,2,opt,name=cheat,proto3" json:"cheat,omitempty"`
	Stake             *Stake       `protobuf:"bytes,3,opt,name=stake,proto3" json:"stake,omitempty"`
	ClientParams      string       `protobuf:"bytes,4,opt,name=clientParams,proto3" json:"clientParams,omitempty"`
	Command           string       `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`
	JackpotStakeValue int64        `protobuf:"varint,6,opt,name=jackpotStakeValue,proto3" json:"jackpotStakeValue,omitempty"`
	FreespinsActive   bool         `protobuf:"varint,7,opt,name=freespinsActive,proto3" json:"freespinsActive,omitempty"`
}

func (x *RequestPlay) Reset() {
	*x = RequestPlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPlay) ProtoMessage() {}

func (x *RequestPlay) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPlay.ProtoReflect.Descriptor instead.
func (*RequestPlay) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{14}
}

func (x *RequestPlay) GetPlayerState() *PlayerState {
	if x != nil {
		return x.PlayerState
	}
	return nil
}

func (x *RequestPlay) GetCheat() string {
	if x != nil {
		return x.Cheat
	}
	return ""
}

func (x *RequestPlay) GetStake() *Stake {
	if x != nil {
		return x.Stake
	}
	return nil
}

func (x *RequestPlay) GetClientParams() string {
	if x != nil {
		return x.ClientParams
	}
	return ""
}

func (x *RequestPlay) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RequestPlay) GetJackpotStakeValue() int64 {
	if x != nil {
		return x.JackpotStakeValue
	}
	return 0
}

func (x *RequestPlay) GetFreespinsActive() bool {
	if x != nil {
		return x.FreespinsActive
	}
	return false
}

// RngInfo - rng infomation
type RngInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bits  int32 `protobuf:"varint,1,opt,name=bits,proto3" json:"bits,omitempty"`
	Range int32 `protobuf:"varint,2,opt,name=range,proto3" json:"range,omitempty"`
	Value int32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RngInfo) Reset() {
	*x = RngInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RngInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RngInfo) ProtoMessage() {}

func (x *RngInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RngInfo.ProtoReflect.Descriptor instead.
func (*RngInfo) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{15}
}

func (x *RngInfo) GetBits() int32 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *RngInfo) GetRange() int32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *RngInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// GameScenePlayResult - result for slots game
type GameScenePlayResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`              // 类型，譬如是线、scatter、还是全线等
	LineIndex  int32   `protobuf:"varint,2,opt,name=lineIndex,proto3" json:"lineIndex,omitempty"`    // 如果是类型是线，这就是线的索引
	Symbol     int32   `protobuf:"varint,3,opt,name=symbol,proto3" json:"symbol,omitempty"`          // 中奖符号
	Mul        int32   `protobuf:"varint,4,opt,name=mul,proto3" json:"mul,omitempty"`                // 中奖符号的基本赔付，paytables里读取
	CoinWin    int32   `protobuf:"varint,5,opt,name=coinWin,proto3" json:"coinWin,omitempty"`        // 线注的倍数
	CashWin    int32   `protobuf:"varint,6,opt,name=cashWin,proto3" json:"cashWin,omitempty"`        // 实际的赔付
	Pos        []int32 `protobuf:"varint,7,rep,packed,name=pos,proto3" json:"pos,omitempty"`         // 中奖图标的坐标，[x0,y0,x1,y1,x2,y2]这样的
	OtherMul   int32   `protobuf:"varint,8,opt,name=otherMul,proto3" json:"otherMul,omitempty"`      // 其它的赔付倍数，譬如一些规则会有其它的翻倍赔付等
	Wilds      int32   `protobuf:"varint,9,opt,name=wilds,proto3" json:"wilds,omitempty"`            // wilds的数量，某些情况下用来特殊赔付
	SymbolNums int32   `protobuf:"varint,10,opt,name=symbolNums,proto3" json:"symbolNums,omitempty"` // 赔付的符号数量
	Value      int32   `protobuf:"varint,11,opt,name=value,proto3" json:"value,omitempty"`           // 如果是奖励FreeSpin，这里是次数
}

func (x *GameScenePlayResult) Reset() {
	*x = GameScenePlayResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameScenePlayResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameScenePlayResult) ProtoMessage() {}

func (x *GameScenePlayResult) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameScenePlayResult.ProtoReflect.Descriptor instead.
func (*GameScenePlayResult) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{16}
}

func (x *GameScenePlayResult) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GameScenePlayResult) GetLineIndex() int32 {
	if x != nil {
		return x.LineIndex
	}
	return 0
}

func (x *GameScenePlayResult) GetSymbol() int32 {
	if x != nil {
		return x.Symbol
	}
	return 0
}

func (x *GameScenePlayResult) GetMul() int32 {
	if x != nil {
		return x.Mul
	}
	return 0
}

func (x *GameScenePlayResult) GetCoinWin() int32 {
	if x != nil {
		return x.CoinWin
	}
	return 0
}

func (x *GameScenePlayResult) GetCashWin() int32 {
	if x != nil {
		return x.CashWin
	}
	return 0
}

func (x *GameScenePlayResult) GetPos() []int32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *GameScenePlayResult) GetOtherMul() int32 {
	if x != nil {
		return x.OtherMul
	}
	return 0
}

func (x *GameScenePlayResult) GetWilds() int32 {
	if x != nil {
		return x.Wilds
	}
	return 0
}

func (x *GameScenePlayResult) GetSymbolNums() int32 {
	if x != nil {
		return x.SymbolNums
	}
	return 0
}

func (x *GameScenePlayResult) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// PlayResult - result for play
type PlayResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurGameMod      string                 `protobuf:"bytes,1,opt,name=curGameMod,proto3" json:"curGameMod,omitempty"`           // 当前游戏模块，一般是 bg、fg 等等
	CurGameModParam *any1.Any              `protobuf:"bytes,2,opt,name=curGameModParam,proto3" json:"curGameModParam,omitempty"` // 这个是游戏参数，每个游戏不一样，保存不同游戏的特殊数据
	NextGameMod     string                 `protobuf:"bytes,3,opt,name=nextGameMod,proto3" json:"nextGameMod,omitempty"`         // 下一个 game round 是什么模块，可能是 bg、fg 等等
	Scenes          []*GameScene           `protobuf:"bytes,4,rep,name=scenes,proto3" json:"scenes,omitempty"`                   // 游戏场景列表，如果中间可能出现场景变化，譬如符号变wild==，这里就会有多个场景，赔付始终用最后一个场景
	OtherScenes     []*GameScene           `protobuf:"bytes,5,rep,name=otherScenes,proto3" json:"otherScenes,omitempty"`         // 轮子以外的场景数据，这个用法会根据游戏有差别，譬如每个格子上需要有单独的奖励，就会放这里
	Results         []*GameScenePlayResult `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty"`                 // 中奖的结算列表
	MulPos          []int32                `protobuf:"varint,7,rep,packed,name=mulPos,proto3" json:"mulPos,omitempty"`           // 倍数位置队列，类似[x0,y0,mul0,x1,y1,mul1]
	CurIndex        int32                  `protobuf:"varint,8,opt,name=curIndex,proto3" json:"curIndex,omitempty"`              // 当前局面索引，因为游戏逻辑服不保存状态，所以每次从0开始
	ParentIndex     int32                  `protobuf:"varint,9,opt,name=parentIndex,proto3" json:"parentIndex,omitempty"`        // 产生当前局面的索引
	ModType         string                 `protobuf:"bytes,10,opt,name=modType,proto3" json:"modType,omitempty"`                // 当前局面模式类型，bg、fg、respin、bonus、jackpot 等等
	PrizeScenes     []*GameScene           `protobuf:"bytes,11,rep,name=prizeScenes,proto3" json:"prizeScenes,omitempty"`        // 场景奖励数据，线注的倍数
	PrizeCoinWin    int64                  `protobuf:"varint,12,opt,name=prizeCoinWin,proto3" json:"prizeCoinWin,omitempty"`     // 如果有额外的奖励数据，这里是额外奖励的汇总，单位是coin，也就是线注的倍数
	PrizeCashWin    int64                  `protobuf:"varint,13,opt,name=prizeCashWin,proto3" json:"prizeCashWin,omitempty"`     // 如果有额外的奖励数据，这里是额外奖励的汇总，单位是货币单位，也就是实际的赢得
	JackpotCoinWin  int64                  `protobuf:"varint,14,opt,name=jackpotCoinWin,proto3" json:"jackpotCoinWin,omitempty"` // 如果有游戏自身的jackpot奖励数据，这里是jackpot奖励的汇总，单位是coin，也就是线注的倍数
	JackpotCashWin  int64                  `protobuf:"varint,15,opt,name=jackpotCashWin,proto3" json:"jackpotCashWin,omitempty"` // 如果有游戏自身的jackpot奖励数据，这里是jackpot奖励的汇总，单位是货币单位，也就是实际的赢得
	JackpotType     int32                  `protobuf:"varint,16,opt,name=jackpotType,proto3" json:"jackpotType,omitempty"`       // jackpot类型
}

func (x *PlayResult) Reset() {
	*x = PlayResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayResult) ProtoMessage() {}

func (x *PlayResult) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayResult.ProtoReflect.Descriptor instead.
func (*PlayResult) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{17}
}

func (x *PlayResult) GetCurGameMod() string {
	if x != nil {
		return x.CurGameMod
	}
	return ""
}

func (x *PlayResult) GetCurGameModParam() *any1.Any {
	if x != nil {
		return x.CurGameModParam
	}
	return nil
}

func (x *PlayResult) GetNextGameMod() string {
	if x != nil {
		return x.NextGameMod
	}
	return ""
}

func (x *PlayResult) GetScenes() []*GameScene {
	if x != nil {
		return x.Scenes
	}
	return nil
}

func (x *PlayResult) GetOtherScenes() []*GameScene {
	if x != nil {
		return x.OtherScenes
	}
	return nil
}

func (x *PlayResult) GetResults() []*GameScenePlayResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PlayResult) GetMulPos() []int32 {
	if x != nil {
		return x.MulPos
	}
	return nil
}

func (x *PlayResult) GetCurIndex() int32 {
	if x != nil {
		return x.CurIndex
	}
	return 0
}

func (x *PlayResult) GetParentIndex() int32 {
	if x != nil {
		return x.ParentIndex
	}
	return 0
}

func (x *PlayResult) GetModType() string {
	if x != nil {
		return x.ModType
	}
	return ""
}

func (x *PlayResult) GetPrizeScenes() []*GameScene {
	if x != nil {
		return x.PrizeScenes
	}
	return nil
}

func (x *PlayResult) GetPrizeCoinWin() int64 {
	if x != nil {
		return x.PrizeCoinWin
	}
	return 0
}

func (x *PlayResult) GetPrizeCashWin() int64 {
	if x != nil {
		return x.PrizeCashWin
	}
	return 0
}

func (x *PlayResult) GetJackpotCoinWin() int64 {
	if x != nil {
		return x.JackpotCoinWin
	}
	return 0
}

func (x *PlayResult) GetJackpotCashWin() int64 {
	if x != nil {
		return x.JackpotCashWin
	}
	return 0
}

func (x *PlayResult) GetJackpotType() int32 {
	if x != nil {
		return x.JackpotType
	}
	return 0
}

// GameResult - game result
//
//	每个game round的结算数据
type GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinWin    int64       `protobuf:"varint,1,opt,name=coinWin,proto3" json:"coinWin,omitempty"`      // 线注的倍数
	CashWin    int64       `protobuf:"varint,2,opt,name=cashWin,proto3" json:"cashWin,omitempty"`      // 实际的赢得
	ClientData *PlayResult `protobuf:"bytes,3,opt,name=clientData,proto3" json:"clientData,omitempty"` // 局面数据
}

func (x *GameResult) Reset() {
	*x = GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameResult) ProtoMessage() {}

func (x *GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameResult.ProtoReflect.Descriptor instead.
func (*GameResult) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{18}
}

func (x *GameResult) GetCoinWin() int64 {
	if x != nil {
		return x.CoinWin
	}
	return 0
}

func (x *GameResult) GetCashWin() int64 {
	if x != nil {
		return x.CashWin
	}
	return 0
}

func (x *GameResult) GetClientData() *PlayResult {
	if x != nil {
		return x.ClientData
	}
	return nil
}

// ReplyPlay - play output parameters for the game
type ReplyPlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomNumbers []*RngInfo    `protobuf:"bytes,1,rep,name=randomNumbers,proto3" json:"randomNumbers,omitempty"`
	PlayerState   *PlayerState  `protobuf:"bytes,2,opt,name=playerState,proto3" json:"playerState,omitempty"`
	Finished      bool          `protobuf:"varint,3,opt,name=finished,proto3" json:"finished,omitempty"`
	Results       []*GameResult `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	NextCommands  []string      `protobuf:"bytes,5,rep,name=nextCommands,proto3" json:"nextCommands,omitempty"`
	// Deprecated: Marked as deprecated in dtgame.proto.
	Stake             *Stake   `protobuf:"bytes,6,opt,name=stake,proto3" json:"stake,omitempty"`
	NextCommandParams []string `protobuf:"bytes,7,rep,name=nextCommandParams,proto3" json:"nextCommandParams,omitempty"`
}

func (x *ReplyPlay) Reset() {
	*x = ReplyPlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtgame_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyPlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyPlay) ProtoMessage() {}

func (x *ReplyPlay) ProtoReflect() protoreflect.Message {
	mi := &file_dtgame_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyPlay.ProtoReflect.Descriptor instead.
func (*ReplyPlay) Descriptor() ([]byte, []int) {
	return file_dtgame_proto_rawDescGZIP(), []int{19}
}

func (x *ReplyPlay) GetRandomNumbers() []*RngInfo {
	if x != nil {
		return x.RandomNumbers
	}
	return nil
}

func (x *ReplyPlay) GetPlayerState() *PlayerState {
	if x != nil {
		return x.PlayerState
	}
	return nil
}

func (x *ReplyPlay) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *ReplyPlay) GetResults() []*GameResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ReplyPlay) GetNextCommands() []string {
	if x != nil {
		return x.NextCommands
	}
	return nil
}

// Deprecated: Marked as deprecated in dtgame.proto.
func (x *ReplyPlay) GetStake() *Stake {
	if x != nil {
		return x.Stake
	}
	return nil
}

func (x *ReplyPlay) GetNextCommandParams() []string {
	if x != nil {
		return x.NextCommandParams
	}
	return nil
}

var File_dtgame_proto protoreflect.FileDescriptor

var file_dtgame_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x74, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x20, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x2e, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x22, 0x31, 0x0a, 0x09, 0x52, 0x65, 0x65, 0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x05, 0x72, 0x65, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x05,
	0x72, 0x65, 0x65, 0x6c, 0x73, 0x22, 0x69, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x77,
	0x22, 0x4e, 0x0a, 0x16, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65,
	0x78, 0x74, 0x4d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x65, 0x78, 0x74, 0x4d,
	0x22, 0x19, 0x0a, 0x17, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x18, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0xa7, 0x04, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x65, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x72, 0x65, 0x65, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x67, 0x63,
	0x37, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x61, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70,
	0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x32, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x62, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x73, 0x1a, 0x4b, 0x0a, 0x0a,
	0x52, 0x65, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x67,
	0x63, 0x37, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x65, 0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x0e, 0x50, 0x61, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6b, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0x57, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x73, 0x68, 0x42, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x73,
	0x68, 0x42, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0x95, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x12, 0x35, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x65, 0x61, 0x74, 0x12, 0x23, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73,
	0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69,
	0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x49, 0x0a, 0x07, 0x52, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6d, 0x75, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x57,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x6c,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x6c, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x05, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x06, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x75, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x75, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x57,
	0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x43,
	0x61, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72,
	0x69, 0x7a, 0x65, 0x43, 0x61, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x57,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x61, 0x73,
	0x68, 0x57, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6a, 0x61, 0x63, 0x6b,
	0x70, 0x6f, 0x74, 0x43, 0x61, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x0a,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x69, 0x6e, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x69,
	0x6e, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x12, 0x32,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xbe, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x12, 0x35, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62,
	0x2e, 0x52, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x67,
	0x63, 0x37, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x67,
	0x63, 0x37, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x32, 0xee, 0x01, 0x0a, 0x0b, 0x44, 0x54, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x15, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x12, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x67,
	0x63, 0x37, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x1a, 0x13, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a,
	0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x13, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x1a, 0x11, 0x2e, 0x73, 0x67, 0x63,
	0x37, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x79, 0x32, 0x12, 0x13, 0x2e, 0x73, 0x67, 0x63,
	0x37, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x1a,
	0x11, 0x2e, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x7a, 0x68, 0x73, 0x30, 0x30, 0x37, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x67,
	0x61, 0x6d, 0x65, 0x63, 0x6f, 0x72, 0x65, 0x37, 0x2f, 0x73, 0x67, 0x63, 0x37, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dtgame_proto_rawDescOnce sync.Once
	file_dtgame_proto_rawDescData = file_dtgame_proto_rawDesc
)

func file_dtgame_proto_rawDescGZIP() []byte {
	file_dtgame_proto_rawDescOnce.Do(func() {
		file_dtgame_proto_rawDescData = protoimpl.X.CompressGZIP(file_dtgame_proto_rawDescData)
	})
	return file_dtgame_proto_rawDescData
}

var file_dtgame_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_dtgame_proto_goTypes = []interface{}{
	(*Column)(nil),                   // 0: sgc7pb.Column
	(*Row)(nil),                      // 1: sgc7pb.Row
	(*LinesData)(nil),                // 2: sgc7pb.LinesData
	(*ReelsData)(nil),                // 3: sgc7pb.ReelsData
	(*GameScene)(nil),                // 4: sgc7pb.GameScene
	(*BasicPlayerPublicState)(nil),   // 5: sgc7pb.BasicPlayerPublicState
	(*BasicPlayerPrivateState)(nil),  // 6: sgc7pb.BasicPlayerPrivateState
	(*BasicPlayerPublicState2)(nil),  // 7: sgc7pb.BasicPlayerPublicState2
	(*BasicPlayerPrivateState2)(nil), // 8: sgc7pb.BasicPlayerPrivateState2
	(*GameConfig)(nil),               // 9: sgc7pb.GameConfig
	(*RequestConfig)(nil),            // 10: sgc7pb.RequestConfig
	(*PlayerState)(nil),              // 11: sgc7pb.PlayerState
	(*RequestInitialize)(nil),        // 12: sgc7pb.RequestInitialize
	(*Stake)(nil),                    // 13: sgc7pb.Stake
	(*RequestPlay)(nil),              // 14: sgc7pb.RequestPlay
	(*RngInfo)(nil),                  // 15: sgc7pb.RngInfo
	(*GameScenePlayResult)(nil),      // 16: sgc7pb.GameScenePlayResult
	(*PlayResult)(nil),               // 17: sgc7pb.PlayResult
	(*GameResult)(nil),               // 18: sgc7pb.GameResult
	(*ReplyPlay)(nil),                // 19: sgc7pb.ReplyPlay
	nil,                              // 20: sgc7pb.GameConfig.ReelsEntry
	nil,                              // 21: sgc7pb.GameConfig.PayTablesEntry
	(*any1.Any)(nil),                 // 22: google.protobuf.Any
}
var file_dtgame_proto_depIdxs = []int32{
	1,  // 0: sgc7pb.LinesData.lines:type_name -> sgc7pb.Row
	0,  // 1: sgc7pb.ReelsData.reels:type_name -> sgc7pb.Column
	0,  // 2: sgc7pb.GameScene.values:type_name -> sgc7pb.Column
	2,  // 3: sgc7pb.GameConfig.lines:type_name -> sgc7pb.LinesData
	20, // 4: sgc7pb.GameConfig.reels:type_name -> sgc7pb.GameConfig.ReelsEntry
	21, // 5: sgc7pb.GameConfig.payTables:type_name -> sgc7pb.GameConfig.PayTablesEntry
	4,  // 6: sgc7pb.GameConfig.defaultScene:type_name -> sgc7pb.GameScene
	4,  // 7: sgc7pb.GameConfig.defaultScene2:type_name -> sgc7pb.GameScene
	22, // 8: sgc7pb.PlayerState.public:type_name -> google.protobuf.Any
	22, // 9: sgc7pb.PlayerState.private:type_name -> google.protobuf.Any
	11, // 10: sgc7pb.RequestPlay.playerState:type_name -> sgc7pb.PlayerState
	13, // 11: sgc7pb.RequestPlay.stake:type_name -> sgc7pb.Stake
	22, // 12: sgc7pb.PlayResult.curGameModParam:type_name -> google.protobuf.Any
	4,  // 13: sgc7pb.PlayResult.scenes:type_name -> sgc7pb.GameScene
	4,  // 14: sgc7pb.PlayResult.otherScenes:type_name -> sgc7pb.GameScene
	16, // 15: sgc7pb.PlayResult.results:type_name -> sgc7pb.GameScenePlayResult
	4,  // 16: sgc7pb.PlayResult.prizeScenes:type_name -> sgc7pb.GameScene
	17, // 17: sgc7pb.GameResult.clientData:type_name -> sgc7pb.PlayResult
	15, // 18: sgc7pb.ReplyPlay.randomNumbers:type_name -> sgc7pb.RngInfo
	11, // 19: sgc7pb.ReplyPlay.playerState:type_name -> sgc7pb.PlayerState
	18, // 20: sgc7pb.ReplyPlay.results:type_name -> sgc7pb.GameResult
	13, // 21: sgc7pb.ReplyPlay.stake:type_name -> sgc7pb.Stake
	3,  // 22: sgc7pb.GameConfig.ReelsEntry.value:type_name -> sgc7pb.ReelsData
	1,  // 23: sgc7pb.GameConfig.PayTablesEntry.value:type_name -> sgc7pb.Row
	10, // 24: sgc7pb.DTGameLogic.getConfig:input_type -> sgc7pb.RequestConfig
	12, // 25: sgc7pb.DTGameLogic.initialize:input_type -> sgc7pb.RequestInitialize
	14, // 26: sgc7pb.DTGameLogic.play:input_type -> sgc7pb.RequestPlay
	14, // 27: sgc7pb.DTGameLogic.play2:input_type -> sgc7pb.RequestPlay
	9,  // 28: sgc7pb.DTGameLogic.getConfig:output_type -> sgc7pb.GameConfig
	11, // 29: sgc7pb.DTGameLogic.initialize:output_type -> sgc7pb.PlayerState
	19, // 30: sgc7pb.DTGameLogic.play:output_type -> sgc7pb.ReplyPlay
	19, // 31: sgc7pb.DTGameLogic.play2:output_type -> sgc7pb.ReplyPlay
	28, // [28:32] is the sub-list for method output_type
	24, // [24:28] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_dtgame_proto_init() }
func file_dtgame_proto_init() {
	if File_dtgame_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dtgame_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReelsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicPlayerPublicState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicPlayerPrivateState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicPlayerPublicState2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicPlayerPrivateState2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInitialize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RngInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameScenePlayResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtgame_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyPlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dtgame_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dtgame_proto_goTypes,
		DependencyIndexes: file_dtgame_proto_depIdxs,
		MessageInfos:      file_dtgame_proto_msgTypes,
	}.Build()
	File_dtgame_proto = out.File
	file_dtgame_proto_rawDesc = nil
	file_dtgame_proto_goTypes = nil
	file_dtgame_proto_depIdxs = nil
}
