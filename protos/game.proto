syntax = "proto3";
package sgc7pb;
option go_package = "github.com/zhs007/slotsgamecore7/sgc7pb";
import "google/protobuf/any.proto";

// Column
message Column {
    repeated int32 values = 1;
}

// Row
message Row {
    repeated int32 values = 1;
}

// LinesData
message LinesData {
    repeated Row lines = 1;
}

// ReelsData
message ReelsData {
    repeated Column reels = 1;
}

// GameScene
message GameScene {
    repeated Column values = 1;     // 列
    repeated int32 indexes = 2;     // 轮子索引
    repeated int32 validRow = 3;    // 有效的行
}

// BasicPlayerPublicState - basic PlayerPublicState
message BasicPlayerPublicState {
    string curGameMod = 1;
    int32 nextM = 2;
}

// BasicPlayerPrivateState - basic PlayerPrivateState
message BasicPlayerPrivateState {
}

// BasicPlayerPublicState2 - basic PlayerPublicState
message BasicPlayerPublicState2 {
    string json = 1;
}

// BasicPlayerPrivateState2 - basic PlayerPrivateState
message BasicPlayerPrivateState2 {
    string json = 1;
}

// GameConfig
message GameConfig {
    LinesData lines = 1;
    map<string, ReelsData> reels = 2;
    map<int32, Row> payTables = 3;
    int32 width = 4;
    int32 height = 5;
    string ver = 6;
    string coreVer = 7;
    GameScene defaultScene = 8;
    repeated GameScene defaultScene2 = 9;
    repeated int32 betMuls = 10;
}

// RequestConfig
message RequestConfig {
}

// PlayerState
message PlayerState {
    google.protobuf.Any public = 1;
    google.protobuf.Any private = 2;
}

// RequestInitialize
message RequestInitialize {
}

message Stake {
    int32 coinBet = 1;
    int32 cashBet = 2;
    string currency = 3;
}

// RequestPlay - play input parameters for the game
message RequestPlay {
    PlayerState playerState = 1;
    string cheat = 2;
    Stake stake = 3;
    string clientParams = 4;
    string command = 5;
    int64 jackpotStakeValue = 6;
    bool freespinsActive = 7;
}

// RngInfo - rng infomation
message RngInfo {
    int32 bits = 1;
    int32 range = 2;
    int32 value = 3;
}

// GameScenePlayResult - result for slots game
message GameScenePlayResult {
    int32 type = 1;         // 类型，譬如是线、scatter、还是全线等
    int32 lineIndex = 2;    // 如果是类型是线，这就是线的索引
    int32 symbol = 3;       // 中奖符号
    int32 mul = 4;          // 中奖符号的基本赔付，paytables里读取
    int32 coinWin = 5;      // 线注的倍数
    int32 cashWin = 6;      // 实际的赔付
    repeated int32 pos = 7; // 中奖图标的坐标，[x0,y0,x1,y1,x2,y2]这样的
    int32 otherMul = 8;     // 其它的赔付倍数，譬如一些规则会有其它的翻倍赔付等
    int32 wilds = 9;        // wilds的数量，某些情况下用来特殊赔付
    int32 symbolNums = 10;  // 赔付的符号数量
    int32 value = 11;       // 如果是奖励FreeSpin，这里是次数
}

// PlayResult - result for play
message PlayResult {
    string curGameMod = 1;                      // 当前游戏模块，一般是 bg、fg 等等
    google.protobuf.Any curGameModParam = 2;    // 这个是游戏参数，每个游戏不一样，保存不同游戏的特殊数据
    string nextGameMod = 3;                     // 下一个 game round 是什么模块，可能是 bg、fg 等等
    repeated GameScene scenes = 4;              // 游戏场景列表，如果中间可能出现场景变化，譬如符号变wild==，这里就会有多个场景，赔付始终用最后一个场景
    repeated GameScene otherScenes = 5;         // 轮子以外的场景数据，这个用法会根据游戏有差别，譬如每个格子上需要有单独的奖励，就会放这里
    repeated GameScenePlayResult results = 6;   // 中奖的结算列表
    repeated int32 mulPos = 7;                  // 倍数位置队列，类似[x0,y0,mul0,x1,y1,mul1]
    int32 curIndex = 8;                         // 当前局面索引，因为游戏逻辑服不保存状态，所以每次从0开始
    int32 parentIndex = 9;                      // 产生当前局面的索引
    string modType = 10;                        // 当前局面模式类型，bg、fg、respin、bonus、jackpot 等等
    repeated GameScene prizeScenes = 11;        // 场景奖励数据，线注的倍数
    int64 prizeCoinWin = 12;                    // 如果有额外的奖励数据，这里是额外奖励的汇总，单位是coin，也就是线注的倍数
    int64 prizeCashWin = 13;                    // 如果有额外的奖励数据，这里是额外奖励的汇总，单位是货币单位，也就是实际的赢得
    int64 jackpotCoinWin = 14;                  // 如果有游戏自身的jackpot奖励数据，这里是jackpot奖励的汇总，单位是coin，也就是线注的倍数
    int64 jackpotCashWin = 15;                  // 如果有游戏自身的jackpot奖励数据，这里是jackpot奖励的汇总，单位是货币单位，也就是实际的赢得
    int32 jackpotType = 16;                     // jackpot类型
}

// GameResult - game result
//      每个game round的结算数据
message GameResult {
    int64 coinWin = 1;          // 线注的倍数
    int64 cashWin = 2;          // 实际的赢得
    PlayResult clientData = 3;  // 局面数据
}

// ReplyPlay - play output parameters for the game
message ReplyPlay {
    repeated RngInfo randomNumbers = 1;
    PlayerState playerState = 2;
    bool finished = 3;
    repeated GameResult results = 4;
    repeated string nextCommands = 5;
    Stake stake = 6 [deprecated = true];
    repeated string nextCommandParams = 7;
}

// DTGameLogic - DTGameLogic
service DTGameLogic {
	// getConfig - get config
    rpc getConfig(RequestConfig) returns (GameConfig) {}
    // initialize - initialize a player
    rpc initialize(RequestInitialize) returns (PlayerState) {}
    // play - play game
    rpc play(RequestPlay) returns (stream ReplyPlay) {}
    // play2 - play game v2
    rpc play2(RequestPlay) returns (ReplyPlay) {}
}