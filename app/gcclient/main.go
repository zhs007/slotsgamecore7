package main

import (
	"context"
	"log/slog"
	"os"

	"github.com/zhs007/goutils"
	"github.com/zhs007/slotsgamecore7/gamecollection"
	"github.com/zhs007/slotsgamecore7/sgc7pb"
	sgc7ver "github.com/zhs007/slotsgamecore7/ver"
)

func main() {
	goutils.InitLogger2("gamecollection", sgc7ver.Version,
		"info", true, "./logs")

	client, err := gamecollection.NewClient(":5000")
	if err != nil {
		goutils.Error("NewClient",
			goutils.Err(err))

		return
	}

	data, err := os.ReadFile("../data/game.json")
	if err != nil {
		goutils.Error("ReadFile",
			goutils.Err(err))

		return
	}

	ret0, err := client.InitGame(context.Background(), "moonwalk", string(data))
	if err != nil {
		goutils.Error("InitGame",
			goutils.Err(err))

		return
	}

	goutils.Info("InitGame",
		slog.Any("ret", ret0))

	ret1, err := client.GetGameConfig(context.Background(), "moonwalk")
	if err != nil {
		goutils.Error("GetGameConfig",
			goutils.Err(err))

		return
	}

	goutils.Info("GetGameConfig",
		slog.Any("ret", ret1))

	ret2, err := client.InitializeGamePlayer(context.Background(), "moonwalk")
	if err != nil {
		goutils.Error("InitializeGamePlayer error",
			goutils.Err(err))

		return
	}

	goutils.Info("InitializeGamePlayer",
		slog.Any("ret", ret2))

	ret3, err := client.PlayGame(context.Background(), "moonwalk", ret2.PlayerState, "74,26,46,48,15,52,24,393,501,213,435,22,7,1584,1525,662,2175,1362,1816,1123,720,3077,1105,1169,2569,476,2263,1304,1662,2790,1793,651,1951,2608,514,53,737,4200,1235,5726,3617,3389,3190,9812,7440,7907,211,8664,3622,8473,9139,3910,6267,8095,5697,5117,7641,500,3381,8920,1925,2655,5923,5455,1806,1402,1974,379,1463,2434,34,540,1256,894,1949,59,54,22,42,6,47,10,50,24,54,17,6,46,39,11,13,47,46,7,16,52,16,9,1,1223,494,333,1007,965,1869,1418,2262,470,2601,2812,9,304,70,613,759,701,114,486,371,403,113,464,197,828,614,461,795,0,5218,7143,2387,69002,76072,68329,39,65,9,4,66,39,55,19,46,47,26,50,22,26,30,11,1,1498,2633,2334,3292,1049,2034,58,101,355,788,24,374,293,97,398,268,71,849,592,22,507,285,805,732,908,359,425,17,339,2817,3415,1886,2691,2392,2456,80,9361,9154,4329,272,24360,20949,41656,30670,35453,50,15,5,62,35,13,2,3310,2793,3267,2420,2258,2968,2950,3319,2313,1014,2490,3393,2440,536,2487,3297,118,254,831,651,635,368,653,641,273,369,903,369,34,253,277,321,291,679,805,539,156,635,463,810,656,840,263,630,796,6,34,14,16,26,18,32,1,1231,1150,1332,791,1377,452,2554,2294,28,867,152,813,478,427,24,544,949,47,785,922,232,964,588,17,55,69,1,26,64,59,19,21,34,4,40,32,47,46,37,18,44,53,35,36,35,41,47,54,20,20,48,0,2238,3403,1580,2040,2777,2841,593,1672,3393,1772,334,667,948,2154,2339,610,760,3248,744,3162,3336,2738,1825,1370,2778,1752,1090,789,3045,493,615,829,222,756,583,187,884,762,670,945,278,834,183,917,358,390,24,120,773,937,309,71,930,803,300,643,258,581,48,42,59,30,32,27,8,0,3373,409,708,2348,24,55,986,613,102,878,460,26,354,349,511,517,508,716,472,467,761,368,702,14,63,63,12,4,16,63,0,1163,1673,1441,2184,1008,1927,1771,507,563,2132,63,596,420,730,133,558,782,848,201,307,744,684,266,49,135,602,647,645,120,995,406,975,963,973,400,843,901,682,771,68,62,28,34,36,1,41,45,48,22,29,28,6,18,2,2266,181,1517,688,1904,800,577,1104,3052,154,320,705,342,845,814,419,112,885,936,307,344,842,502,173,761,99,599,54,655,764,676,707,384,395,845,565,395,732,868,307,3231,3119,3027,852,3321,504,2796,1000,2758,375,289,1926,420,3082,2513,1235,452,49,14,27,30,6,49,38,33,37,29,13,32,4,53,3,3,8,8,51,29,54,5,1,2462,2739,2089,3354,536,2830,620,2778,1992,2485,2252,1771,2195,2944,1608,410,1846,1216,2830,640,1604,859,3319,2084,238,3084,1993,3340,2317,384,530,951,98,453,456,824,50,827,711,452,747,179,820,494,467,520,409,752,920,294,65,5,3035,2410,1254,2581,1012,5249,1858,9254,2724,9321,350,1720,2163,7722,9991,5271,4192,9885,8463,6674,7811,29651,37325,2652,28443,35743,1835,19668,56907,42045,5607,49300,41348,1865,49544,1053,3396,6784,8299,5928,1095,53,59,25,39,35,37,48,33,49,47,16,6,54,15,40,11,30,33,10,6,2,1362,2521,2079,2514,261,963,1431,3102,1051,2168,957,362,3436,1148,3293,623,1347,1881,2612,1976,2924,3448,159,610,2224,2244,3226,1318,1406,571,710,663,480,271,49,14,2917,491,3312,1888,791,98,2971,689,357,7924,57755,50187,43198,25721,50132,39,8,53,54,43,59,28,49,26,31,30,39,40,5,53,19,7,43,49,33,34,32,37,31,40,52,32,7,22,33,3,12,29,42,24,43,2490,1546,3297,2651,1892,2969,2293,2799,1693,1222,1353,1643,2144,2873,2026,809,1675,3015,1801,2382,143,589,813,162,207,900,940,582,423,899,556,92,760,410,958,35,152,799,941,309,45,93,525,597,605,271,380,363,482,498,62,7,29,33,40,18,54,32,15,11,30,46,33,32,49,27,36,20,46,44,50,17,37,7,38,12,9,52,4,15,46,34,30,40,32,22,1387,3370,2727,2689,3360,3389,1695,2786,2684,2409,1403,188,796,3398,1691,687,1371,2392,809,2747,2873,2466,3134,2625,2515,1828,1991,2577,1562,180,954,700,898,476,905,212,641,53,811,26,938,953,817,284,353,447,658,270,936,104,578,933,988,543,538,374,438,942,636,616,60,38,71,57,62,1,5,23,3,50,29,20,14,47,31,1,822,3091,3334,841,3417,55,284,895,104,778,269,458,50,215,569,717,709,214,578,417,597,252,754,822,798,239,527,61,152,473,707,395,426,803,35,28,66,32,27,0,39,53,4,50,54,13,52,18,17,35,40,31,7,8,18,20,1,313,44,816,646,110,908,435,501,766,564,120,101,650,630,470,265,558,483,235,700,326,387,27,422,532,397,618,160,845,417,2292,571,1646,2263,2206,24,22,52,55,65,17,46,48,26,43,44,22,44,17,3,6,40,4,43,36,4,19,13,40,5,50,18,4,19,12,16,24,28,31,37,47,40,3108,906,1075,2537,1898,838,2137,1163,1691,2617,1759,1192,1940,1445,2089,110,326,339,667,118,989,285,919,310,40,346,135,660,988,20,5229,2411,3553,3220,2888,4408,6147,1742,8211,2893,7260,722,2180,580,24232,10378,19932,41138,78394,51044,73524,58294,73728,49847,12957,59704,1143,44783,11,21,28,2,56,13,14,16,32,20,0,2705,3087,1481,1408,2181,1592,1984,689,59,731,747,439,285,41,751,442,728,460,964,205,695,562,535,297,881,670,588,817,555,891,607,905,635,324,831,872,725,1957,533,1700,289,923,1118,927,1228,3215,2528,1904,968,2545,1042,1983,5,1,63,36,8,9,41,30,50,46,49,55,52,52,46,47,44,48,16,21,4,23,24,3,1,1890,635,174,616,2554,660,2191,1959,1032,1712,2313,2133,2650,2002,1629,2738,1074,296,2076,3076,55,438,900,325,190,177,201,367,832,221,304,339,353,184,451,554,759,888,932,770,444,986,147,77,303,490,261,220,532,1332,1025,3187,2322,2015,1362,210,2057,53,12,63,10,23,38,52,9,52,36,6,27,48,20,31,39,45,36,39,35,43,5,53,52,31,6,43,29,28,9,44,26,31,47,3,21,2564,1669,1632,1471,1267,1784,2475,3255,1189,2362,3285,2124,1908,2457,3036,748,1318,1730,2952,1839,3418,3269,509,2643,492,3224,333,2484,927,2109,5,2364,1461,3296,2225,1074,1049,504,528,5668,8979,250,9712,296,5166,2178,9724,453,6623,4685,78491,23753,78745,18982,12609,29717,72062,60577,42784,23907,15239,74074", &sgc7pb.Stake{
		CoinBet:  1,
		CashBet:  10,
		Currency: "EUR",
	}, "", "")
	if err != nil {
		goutils.Error("PlayGame error",
			goutils.Err(err))

		return
	}

	goutils.Info("PlayGame",
		slog.Any("ret", ret3))

	ret4, err := client.PlayGame(context.Background(), "moonwalk", ret3.Play.PlayerState, "", &sgc7pb.Stake{
		CoinBet:  2,
		CashBet:  20,
		Currency: "EUR",
	}, "", "")
	if err != nil {
		goutils.Error("PlayGame error",
			goutils.Err(err))

		return
	}

	goutils.Info("PlayGame",
		slog.Any("ret", ret4))

	ret5, err := client.PlayGame(context.Background(), "moonwalk", ret4.Play.PlayerState, "", &sgc7pb.Stake{
		CoinBet:  3,
		CashBet:  30,
		Currency: "EUR",
	}, "", "")
	if err != nil {
		goutils.Error("PlayGame error",
			goutils.Err(err))

		return
	}

	ps := ret5.Play.PlayerState
	for range 100000 {
		curret, err := client.PlayGame(context.Background(), "moonwalk", ps, "", &sgc7pb.Stake{
			CoinBet:  3,
			CashBet:  30,
			Currency: "EUR",
		}, "", "")
		if err != nil {
			goutils.Error("PlayGame error",
				goutils.Err(err))

			return
		}

		ps = curret.Play.PlayerState
	}

	goutils.Info("PlayGame",
		slog.Any("ret", ret5))
}
